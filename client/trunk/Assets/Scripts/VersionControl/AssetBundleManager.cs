// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using LitJson;
using System.Text;
using System.IO;
using System.Collections;
using LuaInterface;


public class AssetBundleManager
{
	public static WWW currentWWW = null;
	static public readonly string kAssetBundlesPath = null;
	static public Dictionary<string, AssetBundle> loadedBundles;
	static AssetBundleManager() {
		kAssetBundlesPath = Application.persistentDataPath + "/dyd";
		loadedBundles = new Dictionary<string, AssetBundle>();
	}
#if !UNITY_IPHONE || UNITY_EDITOR
	static void InitAndroidStreamAssets(){
		AndroidStreamingAssetsLoad.EachAllFile ((string file) => 
		 {
			if (Path.GetExtension(file) != ".bhp"){
				return;
			}
			string newPath = kAssetBundlesPath + "/" + file;
			Stream subFileStream = AndroidStreamingAssetsLoad.GetFile(file);
			byte[] subFileContent = new byte[subFileStream.Length];
			subFileStream.Read(subFileContent, 0, (int)subFileStream.Length);
			subFileStream.Close();

			FileStream wf = new FileStream(newPath, FileMode.OpenOrCreate);
			wf.Write(subFileContent, 0, subFileContent.Length);
			wf.Close();
		});
		
		AndroidStreamingAssetsLoad.Release ();
	}	
#endif
	public static void InitBundles (){
		if (!Directory.Exists (kAssetBundlesPath)) {
			Directory.CreateDirectory(kAssetBundlesPath);
			UncompressPackageBundles();
		}
	}
	public static void UncompressPackageBundles(){
		if (Application.platform == RuntimePlatform.Android){
#if !UNITY_IPHONE || UNITY_EDITOR
			InitAndroidStreamAssets();
#endif
		}else{
			string[] files = Directory.GetFiles(Application.streamingAssetsPath);
			foreach(string file in files){
				string targetPath = kAssetBundlesPath + "/" + Path.GetFileName(file);
				Debug.Log(targetPath + "," + file);
				if (File.Exists(targetPath)){
					File.Delete(targetPath);
				}
				File.Copy(file, targetPath);
			}
		}
	}
	public delegate void LoadBundleCallback(AssetBundle b, string error);
	public static IEnumerator LoadBundle (string bundleName, LoadBundleCallback callback){
		if (!loadedBundles.ContainsKey (bundleName)) {
			string url = "file:///" + VersionManager.kDownloadPath + "/" + AESEncryptor.GetMd5(bundleName) + ".bhp";
			Debug.Log("LoadBundle url : " + url);
			currentWWW = new WWW(url);
			yield return currentWWW;
			if (currentWWW.assetBundle == null || currentWWW.error != null){
				callback(null, currentWWW.error);
			}
			loadedBundles.Add (bundleName, currentWWW.assetBundle);
		}
		callback (loadedBundles [bundleName], null);
	}

	public static AssetBundle GetBundle (string bundleName){
		if (!loadedBundles.ContainsKey (bundleName)) {
			return null;
		}
		return loadedBundles [bundleName];
	}
	public static UnityEngine.Object LoadAsset(string assetName, string bundleName){
		AssetBundle bundle = GetBundle (bundleName);
		if (bundle == null) {
			return null;		
		}
		Type assetType = typeof(UnityEngine.Object);
		if (VersionManager.localVersionInfo != null) {
			BundleInfo b = VersionManager.localVersionInfo.GetBundleInfoByName(bundleName);
			if (b.type == ".prefab"){
				assetType = typeof(GameObject);
			}else if (b.type == ".png" || b.type == ".tga"){
				assetType = typeof(Texture);
			}else if (b.type == ".mp3"){
				assetType = typeof(AudioClip);
			}
		}
		var ret = bundle.LoadAsset (assetName, assetType);
		return ret;
	}

	public static void UnloadBundle(string bundleName){
		if (!loadedBundles.ContainsKey (bundleName)) {
			return;		
		}
		AssetBundle bundle = loadedBundles [bundleName];
		bundle.Unload (true);
		loadedBundles.Remove (bundleName);
	}
	public delegate void LoadBundlesCompleteCallback();
	public static IEnumerator LoadBundles(string[] bundleNames, MonoBehaviour context, LoadBundleCallback progressCallback, LoadBundlesCompleteCallback resultCallback){
		foreach (string bundleName in bundleNames) {
			Debug.Log("LoadingBundle : " + bundleName);
			yield return context.StartCoroutine(LoadBundle(bundleName, progressCallback));
		}
		resultCallback ();
	}


	public static void Register(IntPtr L)
	{
		LuaMethod[] regs = new LuaMethod[]
		{
			new LuaMethod("LoadBundles", Lua_LoadBundles),
			new LuaMethod("LoadAsset", Lua_LoadAsset)
		};
		LuaField[] fields = new LuaField[]
		{
		};
		LuaScriptMgr.RegisterLib(L, "AssetBundleManager", typeof(AssetBundleManager), regs, fields, typeof(object));
	}
	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	public static int Lua_LoadBundles(IntPtr L){
		LuaScriptMgr.CheckArgsCount(L, 4);
		var bundleNames = LuaScriptMgr.GetArrayString (L, 1);
		var context = LuaScriptMgr.GetUnityObject<MonoBehaviour> (L, 2);
		var progressCallback = LuaScriptMgr.GetFunction (L, 3);
		var finishCallback = LuaScriptMgr.GetFunction (L, 4);
		if (bundleNames != null && context != null && progressCallback != null && finishCallback != null) {
			context.StartCoroutine(LoadBundles(bundleNames, context, delegate(AssetBundle b, string error) {
				progressCallback.Call(new object[]{b, error});
			}, delegate() {
				finishCallback.Call();
			}));		
		}
		return 0;
	}
	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	public static int Lua_LoadAsset(IntPtr L){
		LuaScriptMgr.CheckArgsCount(L, 1);
		var assetName = LuaScriptMgr.GetString (L, 1);
		var bunldeName = LuaScriptMgr.GetString (L, 1);
		UnityEngine.Object ret = LoadAsset (assetName, bunldeName);
		LuaScriptMgr.Push (L, ret);
		return 1;
	}
}

