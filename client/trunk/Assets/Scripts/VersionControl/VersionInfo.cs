// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using LitJson;
using System.Collections;
public class VersionInfo
{
	public string versionCode;
	public string appId;
	public List<BundleInfo> bundleInfos;

	public void Encode(JsonData data){
		if (!data.IsObject) {
			return ;		
		}
		versionCode = (data as IDictionary).Contains("versionCode") ? (string)data ["versionCode"] : null;
		appId = (data as IDictionary).Contains("appId") ? (string)data["appId"] : null;
		JsonData bundleInfosObj = (data as IDictionary).Contains ("bundleInfos") ? data ["bundleInfos"] : null;
		if (bundleInfosObj != null) {
			bundleInfos = new List<BundleInfo> ();
			for(int i = 0; i < bundleInfosObj.Count; i++){
				JsonData bundleInfoObj = bundleInfosObj[i];
				if (!bundleInfoObj.IsObject){
					continue;
				}
				BundleInfo b = new BundleInfo();
				b.Encode(bundleInfoObj);
				bundleInfos.Add(b);
			}		
		}
	}

	public void Decode(JsonData data){
		if (!data.IsObject) {
			return;		
		}
		if (versionCode != null) {
			data ["versionCode"] = versionCode;
		}
		if (appId != null) {
			data ["appId"] = appId;
		}
		if (bundleInfos != null) {
			var bsjd = new JsonData();
			bsjd.SetJsonType(JsonType.Array);
			foreach(BundleInfo b in bundleInfos){
				var bjd = new JsonData();
				bjd.SetJsonType(JsonType.Object);
				b.Decode(bjd);
				bsjd.Add(bjd);
			}
			data ["bundleInfos"] = bsjd;
		}
	}

	public BundleInfo GetBundleInfoByName(string name){
		foreach (BundleInfo b in bundleInfos) {
			if (b.name == name){
				return b;
			}		
		}
		return null;
	}
}


public class BundleInfo{
	public static string bundleTarget ; 
	public string name; 
	private string md5_ios;
	private string md5_android;
	public string md5 {
		set{
			switch(bundleTarget){
			case "ios":
				md5_ios = value;
				break;
			case "android":
				md5_android = value;
				break;
			default:
				break;
			}
		}
		get{
			string ret = null;
			switch(bundleTarget){
			case "ios":
				ret = md5_ios;
				break;
			case "android":
				ret = md5_android;
				break;
			default:
				break;
			}
			return ret;
		}
	}
	public string type;
	public string path;
	public List<string> excludes;
	public string versionCode;
	public void Encode(JsonData data){
		if (!data.IsObject) {
			return;		
		}
		name = (data as IDictionary).Contains("name") ? (string)data ["name"] : null;
		md5_ios = (data as IDictionary).Contains("md5_ios") ? (string)data ["md5_ios"] : null;
		md5_android = (data as IDictionary).Contains("md5_android") ? (string)data ["md5_android"] : null;
		type = (data as IDictionary).Contains("type") ? (string)data ["type"] : null;
		path = (data as IDictionary).Contains("path") ? (string)data ["path"] : null;
		JsonData esjo = (data as IDictionary).Contains("excludes") ? data ["excludes"] : null;
		if (esjo != null) {
			excludes = new List<string>();
			for (int i = 0; i < esjo.Count; i++){
				string ejo = (string)esjo[i];
				excludes.Add(ejo);
			}
		}
	}
	public void Decode(JsonData data){
		if (!data.IsObject) {
			return;		
		}
		if (name != null) {
			data ["name"] = name;
		}
		if (md5_ios != null) {
			data ["md5_ios"] = md5_ios;
		}
		if (md5_android != null) {
			data ["md5_android"] = md5_android;
		}
		if (type != null) {
			data["type"] = type;
		}
		if (path != null) {
			data["path"] = path;		
		}
		if (excludes != null) {
			JsonData esjo = new JsonData();
			esjo.SetJsonType(JsonType.Array);
			foreach(string ejs in excludes){
				esjo.Add(ejs);
			}
			data["excludes"] = esjo;
		}
	}
}
